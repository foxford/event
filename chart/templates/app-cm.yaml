apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    {{- include "event.labels" . | nindent 4 }}
  name: {{ include "event.fullname" . }}-app
data:
  App.toml: |
    {{- $id := list (include "event.name" . ) .Values.app.svc.audience | compact | join "." }}
    id = {{ $id | quote }}

    {{- $brokerId := list "mqtt-gateway" .Values.app.svc.audience | compact | join "." }}
    broker_id = {{ $brokerId | quote }}

    http_addr = "0.0.0.0:8080"

    [constraint]
    payload_size = {{ .Values.constraint.payload_size }}

    [http_broker_client]
    host = "http://mqtt-gateway-cluster:8081"
    timeout = "1 minute"

    [mqtt]
    uri = "tcp://mqtt-gateway-cluster:51883"
    clean_session = false
    reconnect_interval = 3
    keep_alive = 15
    max_message_size = 5000000

    {{- with .Values.nats }}
    {{- println "" }}
    [nats]
    url = {{ .url | quote }}
    creds = {{ .creds | quote }}
    subscribe_durable.stream = {{ .subscribe.stream | quote }}
    subscribe_durable.consumer = {{ .subscribe.consumer | quote }}
    subscribe_durable.batch = {{ .subscribe.batch }}
    subscribe_durable.idle_heartbeat = {{ .subscribe.idle_heartbeat | quote }}
    {{- end }}

    {{- with .Values.nats_consumer }}
    {{- println "" }}
    [nats_consumer]
    suspend_interval = {{ .suspend_interval | quote }}
    max_suspend_interval = {{ .max_suspend_interval | quote }}
    suspend_sentry_interval = {{ .suspend_sentry_interval | quote }}
    resubscribe_interval = {{ .resubscribe_interval | quote }}
    {{- end }}

    [sentry]
    dsn = {{ .Values.sentry.dsn | quote }}
    environment = {{ .Release.Namespace | quote }}

    [metrics.http]
    bind_address = "0.0.0.0:8888"
    
    [adjust]
    min_segment_length = {{ .Values.adjust.min_segment_length | quote }}

    ##
    ## ULMS
    ##
    [id_token]
    algorithm = "ES256"
    key = "data/keys/svc.private_key.p8.der"

    {{- println "" }}

    {{- range .Values.app.audiences }}
    ##
    ## {{ .audience }}
    ##
    {{- $tenantServiceAudience := include "event.tenantServiceAudience" .audience }}
    {{- $tenantUserAudience := include "event.tenantUserAudience" .audience }}
    {{- $tenantObjectAudience := include "event.tenantObjectAudience" (list $.Release.Namespace .audience) }}
    {{- with .authn }}
    [authn.{{ list "iam" $tenantServiceAudience | join "." | quote }}]
    audience = [{{ $tenantServiceAudience | quote }}, {{ $tenantUserAudience | quote }}]
    algorithm = "ES256"
    key = {{ .key | quote }}
    {{- end }}

    {{- println "" }}

    {{- with .authz }}
    [authz.{{ $tenantObjectAudience | quote }}]
    type = {{ .type | quote }}
    {{- if eq "http" .type }}
    {{- $defaultAuthzUrl := list "http://dispatcher-cluster:8080/api/v1/authz/" $tenantObjectAudience | join "" }}
    uri = {{ default $defaultAuthzUrl .uri | quote }}
    algorithm = {{ default "ES256" .algorithm | quote }}
    key = {{ default "data/keys/svc.private_key.p8.der" .key | quote }}
    user_agent = {{ default $id .user_agent | quote }}
    max_retries = {{ default 3 .max_retries }}
    trusted = [
      {{- range $accountLabel := .trusted }}
        {{ (list $accountLabel $.Values.app.svc.audience) | compact | join "." | quote }},
      {{- end }}
    ]
    {{- end }}
    {{- if eq "local" .type }}
    trusted = [
      {{- range $accountLabel := .trusted }}
        {{ list $accountLabel $.Values.app.svc.audience | join "." | quote }},
      {{- end }}
    ]
    {{- end }}
    {{- if eq "localwhitelist" .type }}
    [[authz.{{ $tenantObjectAudience | quote }}.records]]
    {{- range $record := .records }}
    subject_account_id = {{ get $record "subject_account_id" | quote }}
    object = [
      {{- range $o := get $record "object" }}
      {{ $o | quote }},
      {{- end}}
    ]
    action = {{ get $record "action" | quote }}
    {{- end }}
    {{- end }}
    {{- end }}
    {{- println "" }}
    {{- end }}
